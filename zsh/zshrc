#!/usr/bin/env zsh
# ========================================
# Zsh Configuration
# Based on wasabeef/dotfiles
# ========================================

# Language and Locale
export LANG=en_US.UTF-8
export LANGUAGE=${LANG}
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LESS=-R

# History Configuration
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=10000
export HISTFILESIZE=10000
export SAVEHIST=10000
export FUNCNEST=1000

# History Options
setopt BANG_HIST              # Treat the '!' character specially during expansion
setopt EXTENDED_HISTORY       # Write the history file in the ":start:elapsed;command" format
setopt INC_APPEND_HISTORY     # Write to the history file immediately, not when the shell exits
setopt SHARE_HISTORY          # Share history between all sessions
setopt HIST_EXPIRE_DUPS_FIRST # Expire duplicate entries first when trimming history
setopt HIST_IGNORE_DUPS       # Don't record an entry that was just recorded again
setopt HIST_IGNORE_ALL_DUPS   # Delete old recorded entry if new entry is a duplicate
setopt HIST_FIND_NO_DUPS      # Do not display a line previously found
setopt HIST_IGNORE_SPACE      # Don't record an entry starting with a space
setopt HIST_SAVE_NO_DUPS      # Don't write duplicate entries in the history file
setopt HIST_REDUCE_BLANKS     # Remove superfluous blanks before recording entry
setopt HIST_VERIFY            # Don't execute immediately upon history expansion
setopt HIST_BEEP              # Beep when accessing nonexistent history
setopt AUTO_CD                # Auto change directory when typing directory name

# OS-specific Configuration
case $(uname | tr '[:upper:]' '[:lower:]') in
  linux*)
    # Linux-specific settings
    if command -v /home/linuxbrew/.linuxbrew/bin/brew &> /dev/null; then
      eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
    ;;
  darwin*)
    # macOS-specific settings
    if command -v /opt/homebrew/bin/brew &> /dev/null; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif command -v /usr/local/bin/brew &> /dev/null; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi

    # Disable saving screenshots to Desktop
    defaults write com.apple.screencapture location ~/Pictures/Screenshots

    # Don't create .DS_Store files on network volumes
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    ;;
esac

# Editor Configuration
export EDITOR='nvim'
export VISUAL='nvim'
export PAGER='less'

# ========================================
# Completions (Initialize early for plugins)
# ========================================

# Enable completions
autoload -U compinit && compinit

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Colorful completions
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# ========================================
# Plugin Management with Sheldon
# ========================================

# Check if sheldon is installed
if command -v sheldon &> /dev/null; then
  # Create sheldon config directory if it doesn't exist
  mkdir -p "$HOME/.config/sheldon"

  # Source sheldon plugins (quiet mode)
  export SHELDON_LOAD_QUIET=1
  eval "$(sheldon --quiet source)"
fi

# ========================================
# Path Configuration
# ========================================

# Add local bin to PATH
export PATH="$HOME/.local/bin:$PATH"

# Flutter
if [ -d "$HOME/development/flutter" ]; then
  export PATH="$HOME/development/flutter/bin:$PATH"
fi

# Pub Cache
export PATH="$PATH":"$HOME/.pub-cache/bin"

# Android SDK
if [ -d "$HOME/Library/Android/sdk" ]; then
  export ANDROID_HOME="$HOME/Library/Android/sdk"
  export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
elif [ -d "$HOME/Android/Sdk" ]; then
  export ANDROID_HOME="$HOME/Android/Sdk"
  export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
fi

# Go
if command -v go &> /dev/null; then
  export GOPATH="$HOME/go"
  export PATH="$GOPATH/bin:$PATH"
fi

# Rust
if [ -f "$HOME/.cargo/env" ]; then
  source "$HOME/.cargo/env"
fi

# Node Version Manager (mise/rtx)
if command -v mise &> /dev/null; then
  eval "$(mise activate zsh)"
elif command -v rtx &> /dev/null; then
  eval "$(rtx activate zsh)"
fi

# ========================================
# Aliases
# ========================================

# Editor Aliases
alias vi='nvim'
alias vim='nvim'
alias neovim='nvim'

# Directory Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Modern Command Replacements
if command -v eza &> /dev/null; then
  alias ls='eza --icons --git'
  alias ll='eza -l --icons --git'
  alias la='eza -la --icons --git'
  alias lt='eza --tree --level=2 --icons --git'
  alias lta='eza --tree --level=2 -la --icons --git'
else
  alias ll='ls -l'
  alias la='ls -la'
fi

if command -v bat &> /dev/null; then
  alias cat='bat'
fi

if command -v fd &> /dev/null; then
  alias find='fd'
fi

if command -v rg &> /dev/null; then
  alias grep='rg'
fi

if command -v procs &> /dev/null; then
  alias ps='procs'
fi

if command -v dust &> /dev/null; then
  alias du='dust'
fi

if command -v duf &> /dev/null; then
  alias df='duf'
fi

if command -v btop &> /dev/null; then
  alias top='btop'
elif command -v htop &> /dev/null; then
  alias top='htop'
fi

# Git Aliases
alias g='git'
alias gi='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log'
alias gd='git diff'
alias gb='git branch'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gpl='git pull'
alias gm='git merge'
alias gr='git rebase'

# Lazygit
if command -v lazygit &> /dev/null; then
  alias lg='lazygit'
fi

# GitHub Copilot CLI
if command -v github-copilot-cli &> /dev/null; then
  alias '?'='github-copilot-cli what-the-shell'
  alias '??'='github-copilot-cli explain'
  alias 'git?'='github-copilot-cli git-assist'
  alias 'gh?'='github-copilot-cli gh-assist'
fi

# Flutter/Dart
alias fl='flutter'
alias flr='flutter run'
alias flb='flutter build'
alias flt='flutter test'
alias flc='flutter clean'
alias flpg='flutter pub get'
alias flpu='flutter pub upgrade'
alias fld='flutter doctor'
alias fldev='flutter devices'
alias flem='flutter emulators'

# Melos (monorepo management)
if command -v melos &> /dev/null; then
  alias ml='melos'
  alias mlb='melos bootstrap'
  alias mlc='melos clean'
  alias mlr='melos run'
  alias mlt='melos test'
fi

# Other Development Tools
alias dk='docker'
alias dkc='docker-compose'
alias k='kubectl'
alias tf='terraform'
alias code='code .'

# Utility Aliases
alias reload='source ~/.zshrc'
alias myip='curl -s https://api.ipify.org'
alias weather='curl wttr.in'

# Mise
alias mrucoco=' mise uninstall ruby --all && mise uninstall cocoapods && mise install ruby && mise install cocoapods'

# Claude
alias cl='claude'
alias yolo='claude --dangerously-skip-permissions'
alias ryolo='claude --dangerously-skip-permissions --resume'

# ========================================
# Functions
# ========================================

# Create directory and cd into it
mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar e "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Quick backup of file
backup() {
  cp "$1" "$1.backup-$(date +%Y%m%d-%H%M%S)"
}

# ========================================
# Additional Completions
# ========================================

# Flutter completion
if command -v flutter &> /dev/null; then
  eval "$(flutter bash-completion)"
fi

# ========================================
# FZF Configuration
# ========================================

if command -v fzf &> /dev/null; then
  # FZF default options
  export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'

  # Use fd for FZF if available
  if command -v fd &> /dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  fi

  # Load FZF key bindings and completion
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
fi

# ========================================
# Starship Prompt
# ========================================

if command -v starship &> /dev/null; then
  eval "$(starship init zsh)"
fi

# ========================================
# Local Configuration
# ========================================

# Source local configuration if it exists
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
