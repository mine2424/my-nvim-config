-- ===============================================
-- FlutterÈñãÁô∫Áí∞Â¢ÉË®≠ÂÆö
-- ===============================================

-- Êó¢Â≠ò„ÅÆ„Éó„É©„Ç∞„Ç§„É≥„Éû„Éç„Éº„Ç∏„É£„Éº„Å®„ÅÆÁ´∂Âêà„ÇíÈò≤„Åê
local function safe_require(module)
  local ok, result = pcall(require, module)
  if not ok then
    return nil
  end
  return result
end

-- Êó¢Â≠ò„ÅÆpackerË®≠ÂÆö„Çí„ÇØ„É™„Ç¢
vim.g.loaded_packer = nil
package.loaded.packer = nil
package.loaded['packer.nvim'] = nil

-- „Éó„É©„Ç∞„Ç§„É≥„Éû„Éç„Éº„Ç∏„É£„ÉºÔºàlazy.nvimÔºâ„ÅÆËá™Âãï„Ç§„É≥„Çπ„Éà„Éº„É´
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- ===============================================
-- FlutterÈñãÁô∫Áî®„Éó„É©„Ç∞„Ç§„É≥Ë®≠ÂÆö
-- ===============================================

-- „Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ„ÅÆÊúâÂäπ/ÁÑ°Âäπ„Éï„É©„Ç∞
local enable_debug = true  -- true„Å´„Åô„Çã„Å®DAP„Éó„É©„Ç∞„Ç§„É≥„ÇíÊúâÂäπÂåñÔºà‰æùÂ≠òÈñ¢‰øÇÂïèÈ°å„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØfalse„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºâ

-- „Éá„Éê„ÉÉ„Ç∞Áä∂Ê≥Å„Çí„É≠„Ç∞Âá∫Âäõ
if enable_debug then
  print("Debug plugins enabled")
else
  print("Debug plugins disabled - skipping DAP installation")
end

-- „Éó„É©„Ç∞„Ç§„É≥„É™„Çπ„Éà
local plugins = {
  -- Flutter Tools - FlutterÈñãÁô∫„ÅÆÊ†∏„Å®„Å™„Çã„Éó„É©„Ç∞„Ç§„É≥
  {
    'akinsho/flutter-tools.nvim',
    ft = { "dart" },
    cmd = {
      "FlutterRun", "FlutterDevices", "FlutterEmulators", "FlutterReload",
      "FlutterRestart", "FlutterQuit", "FlutterDevTools"
    },
    dependencies = {
      'nvim-lua/plenary.nvim',
      'stevearc/dressing.nvim', -- UIÊîπÂñÑ
    },
    config = function()
      require("flutter-tools").setup {
        ui = {
          border = "rounded",
          notification_style = 'native'
        },
        decorations = {
          statusline = {
            app_version = false,
            device = true,
            project_config = false,
          }
        },
        debugger = {
          enabled = enable_debug,
          run_via_dap = enable_debug,
          exception_breakpoints = {},
        },
        flutter_path = (function()
          -- Check mise installation paths
          local function check_mise_flutter()
            -- Check if mise is available
            if vim.fn.executable("mise") == 0 then return nil end
            
            -- Get flutter path from mise
            local flutter_path = vim.fn.system("mise which flutter 2>/dev/null"):gsub("%s+", "")
            if vim.v.shell_error == 0 and flutter_path ~= "" then
              return flutter_path
            end
            return nil
          end
          
          -- Check asdf installation paths
          local function check_asdf_flutter()
            -- Check if asdf is available
            if vim.fn.executable("asdf") == 0 then return nil end
            
            -- Get flutter path from asdf
            local flutter_path = vim.fn.system("asdf which flutter 2>/dev/null"):gsub("%s+", "")
            if vim.v.shell_error == 0 and flutter_path ~= "" then
              return flutter_path
            end
            return nil
          end
          
          -- Try mise first, then asdf, then system PATH
          return check_mise_flutter() or check_asdf_flutter() or vim.fn.exepath("flutter") or "flutter"
        end)(),
        flutter_lookup_cmd = nil,
        fvm = false,
        widget_guides = {
          enabled = true,
        },
        closing_tags = {
          highlight = "ErrorMsg",
          prefix = ">",
          enabled = true,
        },
        dev_log = {
          enabled = true,
          notify_errors = false,
          open_cmd = "tabedit",
        },
        dev_tools = {
          autostart = false,
          auto_open_browser = false,
        },
        outline = {
          open_cmd = "30vnew",
          auto_open = false,
        },
        lsp = {
          color = {
            enabled = false,
            background = false,
            foreground = false,
            virtual_text = true,
            virtual_text_str = "‚ñ†",
          },
          on_attach = function(client, bufnr)
            -- LSPÁî®„Ç≠„Éº„Éû„ÉÉ„Éó
            local opts = { buffer = bufnr }
            vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
            vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
            vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
            vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
            vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
            vim.keymap.set('n', '<Leader>rn', vim.lsp.buf.rename, opts)
            vim.keymap.set('n', '<Leader>ca', vim.lsp.buf.code_action, opts)
            vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
            vim.keymap.set('n', '<Leader>e', vim.diagnostic.open_float, opts)
            vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
            vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
            
            -- FlutterÂ∞ÇÁî®„Ç≠„Éº„Éû„ÉÉ„Éó
            vim.keymap.set('n', '<Leader>fr', '<cmd>FlutterRun<cr>', opts)
            vim.keymap.set('n', '<Leader>fq', '<cmd>FlutterQuit<cr>', opts)
            vim.keymap.set('n', '<Leader>fR', '<cmd>FlutterRestart<cr>', opts)
            vim.keymap.set('n', '<Leader>fh', '<cmd>FlutterReload<cr>', opts)
            vim.keymap.set('n', '<Leader>fd', '<cmd>FlutterDevices<cr>', opts)
            vim.keymap.set('n', '<Leader>fe', '<cmd>FlutterEmulators<cr>', opts)
            vim.keymap.set('n', '<Leader>fo', '<cmd>FlutterOutlineToggle<cr>', opts)
            vim.keymap.set('n', '<Leader>ft', '<cmd>FlutterDevTools<cr>', opts)
            vim.keymap.set('n', '<Leader>fc', '<cmd>FlutterLogClear<cr>', opts)
            
            -- Ë®∫Êñ≠Ë®≠ÂÆö„ÅÆ„Ç´„Çπ„Çø„Éû„Ç§„Ç∫
            vim.diagnostic.config({
              virtual_text = {
                prefix = '‚óè',
                spacing = 4,
                source = "if_many",
                format = function(diagnostic)
                  if diagnostic.severity == vim.diagnostic.severity.ERROR then
                    return string.format("üö® %s", diagnostic.message)
                  elseif diagnostic.severity == vim.diagnostic.severity.WARN then
                    return string.format("‚ö†Ô∏è  %s", diagnostic.message)
                  elseif diagnostic.severity == vim.diagnostic.severity.INFO then
                    return string.format("üí° %s", diagnostic.message)
                  else
                    return string.format("üí≠ %s", diagnostic.message)
                  end
                end,
              },
              float = {
                focusable = false,
                close_events = { "BudLeave", "CursorMoved", "InsertEnter", "FocusLost" },
                border = 'rounded',
                source = 'always',
                prefix = '',
                scope = 'cursor',
              },
              signs = {
                text = {
                  [vim.diagnostic.severity.ERROR] = 'üö®',
                  [vim.diagnostic.severity.WARN] = '‚ö†Ô∏è',
                  [vim.diagnostic.severity.INFO] = 'üí°',
                  [vim.diagnostic.severity.HINT] = 'üí≠',
                },
                linehl = {},
                numhl = {},
              },
              underline = true,
              update_in_insert = false,
              severity_sort = true,
            })
          end,
          capabilities = (function()
            local capabilities = vim.lsp.protocol.make_client_capabilities()
            local cmp_ok, cmp_nvim_lsp = pcall(require, 'cmp_nvim_lsp')
            if cmp_ok then
              capabilities = vim.tbl_deep_extend("force", capabilities, cmp_nvim_lsp.default_capabilities())
            end
            return capabilities
          end)(),
          settings = {
            dart = {
              completeFunctionCalls = true,
              showTodos = true,
              lineLength = 120,
              enableSdkFormatter = true,
              analysisExcludedFolders = {
                vim.fn.expand("$HOME/fvm"),
                vim.fn.expand("$HOME/.pub-cache"),
              },
              updateImportsOnRename = true,
              includeDependenciesInWorkspaceSymbols = true,
              enableSnippets = true,
              includeDependenciesInWorkspaceSymbols = true,
              renameFilesWithClasses = "prompt",
            }
          }
        }
      }
    end,
  },

  -- Ë£úÂÆå„Ç®„É≥„Ç∏„É≥
  {
    'hrsh7th/nvim-cmp',
    dependencies = {
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-path',
      'hrsh7th/cmp-cmdline',
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip',
      'rafamadriz/friendly-snippets',
    },
    config = function()
      local cmp = require('cmp')
      local luasnip = require('luasnip')

      -- friendly-snippets„ÇíË™≠„ÅøËæº„Åø
      require("luasnip.loaders.from_vscode").lazy_load()
      
      cmp.setup({
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert({
          ['<C-b>'] = cmp.mapping.scroll_docs(-4),
          ['<C-f>'] = cmp.mapping.scroll_docs(4),
          ['<C-Space>'] = cmp.mapping.complete(),
          ['<C-e>'] = cmp.mapping.abort(),
          ['<CR>'] = cmp.mapping.confirm({ select = true }),
          ['<Tab>'] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            else
              fallback()
            end
          end, { 'i', 's' }),
          ['<S-Tab>'] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { 'i', 's' }),
        }),
        sources = cmp.config.sources({
          { name = 'nvim_lsp' },
          { name = 'luasnip' },
        }, {
          { name = 'buffer' },
          { name = 'path' },
        })
      })
    end,
  },

  -- Treesitter - „Ç∑„É≥„Çø„ÉÉ„ÇØ„Çπ„Éè„Ç§„É©„Ç§„Éà
  {
    'nvim-treesitter/nvim-treesitter',
    build = ':TSUpdate',
    event = { "BufReadPost", "BufNewFile" },
    config = function()
      require('nvim-treesitter.configs').setup {
        ensure_installed = { "dart", "yaml", "json", "markdown", "lua", "vim" },
        auto_install = true,
        sync_install = false,
        highlight = {
          enable = true,
          additional_vim_regex_highlighting = false,
        },
        indent = {
          enable = true,
        },
        -- Neovim 0.10„Åß„ÅÆÁ´∂Âêà„ÇíÂõûÈÅø
        query_linter = {
          enable = true,
          use_virtual_text = true,
          lint_events = {"BufWrite", "CursorHold"},
        },
      }
    end,
  },

  -- Telescope - „Éï„Ç°„Ç∏„Éº„Éï„Ç°„Ç§„É≥„ÉÄ„Éº
  {
    'nvim-telescope/telescope.nvim',
    tag = '0.1.4',
    dependencies = { 'nvim-lua/plenary.nvim' },
    config = function()
      require('telescope').setup({
        defaults = {
          mappings = {
            i = {
              ["<C-j>"] = "move_selection_next",
              ["<C-k>"] = "move_selection_previous",
            },
          },
        },
      })
      
      -- Telescope„Ç≠„Éº„Éû„ÉÉ„Éó
      local builtin = require('telescope.builtin')
      vim.keymap.set('n', '<Leader>ff', builtin.find_files, {})
      vim.keymap.set('n', '<Leader>fg', builtin.live_grep, {})
      vim.keymap.set('n', '<Leader>fb', builtin.buffers, {})
      vim.keymap.set('n', '<Leader>fh', builtin.help_tags, {})
      vim.keymap.set('n', '<Leader>fs', builtin.lsp_document_symbols, {})
      vim.keymap.set('n', '<Leader>fw', builtin.lsp_workspace_symbols, {})
    end,
  },


  -- GitÁµ±Âêà
  {
    'lewis6991/gitsigns.nvim',
    config = function()
      require('gitsigns').setup {
        signs = {
          add = { text = '+' },
          change = { text = '~' },
          delete = { text = '_' },
          topdelete = { text = '‚Äæ' },
          changedelete = { text = '~' },
        },
        current_line_blame = true,
        current_line_blame_opts = {
          virt_text = true,
          virt_text_pos = 'eol',
          delay = 1000,
        },
      }
    end,
  },

  -- „Éï„Ç°„Ç§„É´„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº
  {
    'nvim-tree/nvim-tree.lua',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    config = function()
      require('nvim-tree').setup {
        view = {
          width = 30,
          side = 'left',
        },
        filters = {
          dotfiles = false,
          custom = { '.git', 'node_modules', '.cache' },
        },
        git = {
          enable = true,
          ignore = false,
        },
      }
      vim.keymap.set('n', '<Leader>e', ':NvimTreeToggle<CR>', {})
    end,
  },

  -- Flutter„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ
  {
    'RobertBrunhage/flutter-riverpod-snippets',
    ft = 'dart',
  },

  -- YAMLË®≠ÂÆö„Éï„Ç°„Ç§„É´ÊîØÊè¥
  {
    'stephpy/vim-yaml',
    ft = 'yaml',
  },

  -- „Éï„Ç©„Éº„Éû„ÉÉ„ÇøË®≠ÂÆö
  {
    'stevearc/conform.nvim',
    event = { "BufWritePre" },
    config = function()
      require('conform').setup({
        formatters_by_ft = {
          dart = { 'dart_format' },
        },
        format_on_save = {
          timeout_ms = 500,
          lsp_fallback = true,
        },
      })
    end,
  },

  -- LintÊ§úÁü•Âº∑Âåñ
  {
    'mfussenegger/nvim-lint',
    event = { "BufReadPre", "BufNewFile" },
    config = function()
      local lint = require('lint')
      
      -- Dart„Éï„Ç°„Ç§„É´Áî®„ÅÆlinterË®≠ÂÆö
      lint.linters_by_ft = {
        dart = { 'dart_analyze' }
      }
      
      -- „Ç´„Çπ„Çø„É†Dart Analyzer linter
      lint.linters.dart_analyze = {
        cmd = 'dart',
        stdin = false,
        args = { 'analyze', '--fatal-infos', '.' },
        stream = 'both',
        ignore_exitcode = true,
        parser = function(output, bufnr)
          local diagnostics = {}
          local current_file = vim.api.nvim_buf_get_name(bufnr)
          
          for line in output:gmatch('[^\r\n]+') do
            -- Dart analyze„ÅÆÂá∫ÂäõÂΩ¢Âºè: "  error ‚Ä¢ message ‚Ä¢ file:line:col ‚Ä¢ rule_name"
            local severity, message, file, row, col = line:match('%s*(%w+)%s*‚Ä¢%s*(.-)%s*‚Ä¢%s*([^:]+):(%d+):(%d+)')
            
            if not severity then
              -- Âà•„ÅÆÂΩ¢Âºè: "file:line:col - severity - message"
              file, row, col, severity, message = line:match('([^:]+):(%d+):(%d+)%s*-%s*(%w+)%s*-%s*(.+)')
            end
            
            if not severity then
              -- „Åï„Çâ„Å´Âà•„ÅÆÂΩ¢Âºè: "severity at file:line:col ‚Ä¢ message"
              severity, file, row, col, message = line:match('(%w+)%s+at%s+([^:]+):(%d+):(%d+)%s*‚Ä¢%s*(.+)')
            end
            
            if severity and file and row and col and message and vim.fn.fnamemodify(file, ':p') == current_file then
              local diagnostic_severity = vim.diagnostic.severity.INFO
              local sev_lower = severity:lower()
              if sev_lower == 'error' then
                diagnostic_severity = vim.diagnostic.severity.ERROR
              elseif sev_lower == 'warning' then
                diagnostic_severity = vim.diagnostic.severity.WARN
              elseif sev_lower == 'info' then
                diagnostic_severity = vim.diagnostic.severity.INFO
              elseif sev_lower == 'hint' then
                diagnostic_severity = vim.diagnostic.severity.HINT
              end
              
              table.insert(diagnostics, {
                lnum = tonumber(row) - 1,
                col = tonumber(col) - 1,
                message = message:gsub('^%s+', ''):gsub('%s+$', ''),
                severity = diagnostic_severity,
                source = 'dart_analyze'
              })
            end
          end
          return diagnostics
        end,
      }
      
      -- Ëá™ÂãïlintÂÆüË°å„ÅÆË®≠ÂÆö
      local lint_augroup = vim.api.nvim_create_augroup("lint", { clear = true })
      vim.api.nvim_create_autocmd({ "BufEnter", "BufWritePost", "InsertLeave" }, {
        group = lint_augroup,
        pattern = "*.dart",
        callback = function()
          lint.try_lint()
        end,
      })
    end,
  },

  -- VSCode Task Runner - overseer.nvim
  {
    'stevearc/overseer.nvim',
    cmd = { "OverseerRun", "OverseerToggle", "OverseerOpen", "OverseerClose" },
    config = function()
      require('overseer').setup({
        task_list = {
          direction = "bottom",
          min_height = 25,
          max_height = 25,
          default_detail = 1,
          bindings = {
            ["?"] = "ShowHelp",
            ["g?"] = "ShowHelp",
            ["<CR>"] = "RunAction",
            ["<C-e>"] = "Edit",
            ["o"] = "Open",
            ["<C-v>"] = "OpenVsplit",
            ["<C-s>"] = "OpenSplit",
            ["<C-f>"] = "OpenFloat",
            ["<C-q>"] = "OpenQuickFix",
            ["p"] = "TogglePreview",
            ["<C-l>"] = "IncreaseDetail",
            ["<C-h>"] = "DecreaseDetail",
            ["L"] = "IncreaseAllDetail",
            ["H"] = "DecreaseAllDetail",
            ["["] = "DecreaseWidth",
            ["]"] = "IncreaseWidth",
            ["{"] = "PrevTask",
            ["}"] = "NextTask",
            ["<C-k>"] = "ScrollOutputUp",
            ["<C-j>"] = "ScrollOutputDown",
            ["q"] = "Close",
          },
        },
        form = {
          border = "rounded",
          win_opts = {
            winblend = 10,
          },
        },
        confirm = {
          border = "rounded",
          win_opts = {
            winblend = 10,
          },
        },
        task_win = {
          border = "rounded",
          win_opts = {
            winblend = 10,
          },
        },
        -- VSCode tasks.json support
        auto_detect_success_color = true,
        templates = { "builtin", "vscode" },
        -- Flutter/Dart specific task detection
        task_editor = {
          bindings = {
            i = {
              ["<C-s>"] = "Submit",
              ["<C-c>"] = "Cancel",
            },
            n = {
              ["<CR>"] = "Submit",
              ["<C-s>"] = "Submit",
              ["q"] = "Cancel",
              ["<C-c>"] = "Cancel",
            },
          },
        },
      })
      
      -- VSCode keymaps
      vim.keymap.set('n', '<Leader>vr', ':OverseerRun<CR>', { desc = 'Run VSCode Task' })
      vim.keymap.set('n', '<Leader>vt', ':OverseerToggle<CR>', { desc = 'Toggle Task List' })
      vim.keymap.set('n', '<Leader>vo', ':OverseerOpen<CR>', { desc = 'Open Task List' })
      vim.keymap.set('n', '<Leader>vc', ':OverseerClose<CR>', { desc = 'Close Task List' })
    end,
  },

  -- hlchunk.nvim - „Ç§„É≥„Éá„É≥„Éà„Éª„ÉÅ„É£„É≥„ÇØ„Éè„Ç§„É©„Ç§„Éà
  {
    'shellRaining/hlchunk.nvim',
    event = { "BufReadPre", "BufNewFile" },
    config = function()
      -- FlutterÈñãÁô∫„Å´ÊúÄÈÅ©Âåñ„Åï„Çå„ÅühlchunkË®≠ÂÆö„ÅØ init.lua „ÅßË®≠ÂÆöÊ∏à„Åø
      -- „Éó„É©„Ç∞„Ç§„É≥ÁÆ°ÁêÜ„ÅÆ„Åü„ÇÅ„Å´„Åì„Åì„Åß„ÇÇrequire„ÇíËøΩÂä†
      require("hlchunk")
    end,
  },

  -- VSCode TasksÁµ±Âêà
  {
    'EthanJWright/vs-tasks.nvim',
    dependencies = {
      'nvim-lua/popup.nvim',
      'nvim-lua/plenary.nvim',
      'nvim-telescope/telescope.nvim'
    },
    config = function()
      require("vstask").setup({
        cache_json_conf = true,
        cache_strategy = "last",
        config_dir = ".vscode",
        use_harpoon = false,
      })
    end,
  },

  -- lualine.nvim - È´òÂ∫¶„Å™„Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥
  {
    'nvim-lualine/lualine.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    event = "VeryLazy",
    config = function()
      -- FlutterÈñãÁô∫Áî®„Ç´„Çπ„Çø„É†„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
      local function flutter_device()
        local handle = io.popen("flutter devices --machine 2>/dev/null")
        if handle then
          local result = handle:read("*a")
          handle:close()
          if result and result ~= "" then
            local devices = vim.fn.json_decode(result)
            if devices and #devices > 0 then
              for _, device in ipairs(devices) do
                if device.category == "mobile" or device.category == "desktop" then
                  return "üì± " .. (device.name or "Device")
                end
              end
              return "üì± " .. #devices .. " devices"
            end
          end
        end
        return ""
      end
      
      local function flutter_status()
        if _G.is_flutter_project and _G.is_flutter_project() then
          return "üéØ Flutter"
        end
        return ""
      end
      
      local function dart_version()
        if vim.bo.filetype == "dart" then
          local handle = io.popen("dart --version 2>&1")
          if handle then
            local result = handle:read("*a")
            handle:close()
            local version = result:match("Dart SDK version: ([%d%.]+)")
            if version then
              return "üî∑ " .. version
            end
          end
        end
        return ""
      end
      
      local function lsp_status()
        local clients = vim.lsp.get_clients({ bufnr = 0 })
        if #clients == 0 then
          return ""
        end
        
        local client_names = {}
        for _, client in ipairs(clients) do
          table.insert(client_names, client.name)
        end
        return "‚ö° " .. table.concat(client_names, ", ")
      end
      
      local function git_blame()
        local git_blame = vim.fn.system("git log -1 --pretty=format:'%an' " .. vim.fn.expand('%') .. " 2>/dev/null")
        if vim.v.shell_error == 0 and git_blame ~= "" then
          return "üë§ " .. git_blame
        end
        return ""
      end
      
      local function copilot_status()
        local ok, api = pcall(require, "copilot.api")
        if ok then
          local status = api.status.data
          if status and status.status then
            if status.status == "Ready" then
              return "ü§ñ Ready"
            elseif status.status == "InProgress" then
              return "ü§ñ ..."
            else
              return "ü§ñ " .. status.status
            end
          end
        end
        return ""
      end
      
      require('lualine').setup {
        options = {
          icons_enabled = true,
          theme = 'auto',
          component_separators = { left = '', right = ''},
          section_separators = { left = '', right = ''},
          disabled_filetypes = {
            statusline = {},
            winbar = {},
          },
          ignore_focus = {},
          always_divide_middle = true,
          globalstatus = true,
          refresh = {
            statusline = 1000,
            tabline = 1000,
            winbar = 1000,
          }
        },
        sections = {
          lualine_a = {
            {
              'mode',
              fmt = function(str)
                return str:sub(1,1)
              end
            }
          },
          lualine_b = {
            {
              'branch',
              icon = '',
              color = { fg = '#8FBCBB' }
            },
            {
              'diff',
              symbols = {added = ' ', modified = ' ', removed = ' '},
              diff_color = {
                added = { fg = '#A3BE8C' },
                modified = { fg = '#EBCB8B' },
                removed = { fg = '#BF616A' }
              },
            }
          },
          lualine_c = {
            {
              'filename',
              file_status = true,
              newfile_status = false,
              path = 1, -- Áõ∏ÂØæ„Éë„ÇπË°®Á§∫
              shorting_target = 40,
              symbols = {
                modified = '[+]',
                readonly = '[RO]',
                unnamed = '[No Name]',
                newfile = '[New]',
              }
            },
            {
              flutter_status,
              color = { fg = '#81A1C1', gui = 'bold' },
            }
          },
          lualine_x = {
            {
              copilot_status,
              color = { fg = '#A3BE8C' },
            },
            {
              'diagnostics',
              sources = { 'nvim_diagnostic', 'nvim_lsp' },
              sections = { 'error', 'warn', 'info', 'hint' },
              diagnostics_color = {
                error = { fg = '#BF616A' },
                warn  = { fg = '#EBCB8B' },
                info  = { fg = '#88C0D0' },
                hint  = { fg = '#A3BE8C' },
              },
              symbols = {error = ' ', warn = ' ', info = ' ', hint = ' '},
            },
            {
              lsp_status,
              color = { fg = '#D08770' },
            },
            {
              dart_version,
              color = { fg = '#5E81AC' },
            }
          },
          lualine_y = {
            {
              'encoding',
              fmt = string.upper,
            },
            {
              'fileformat',
              symbols = {
                unix = '',
                dos = '',
                mac = '',
              }
            },
            {
              'filetype',
              colored = true,
              icon_only = false,
              icon = { align = 'right' },
            }
          },
          lualine_z = {
            {
              'progress',
            },
            {
              'location',
              padding = { left = 0, right = 1 }
            }
          }
        },
        inactive_sections = {
          lualine_a = {},
          lualine_b = {},
          lualine_c = {'filename'},
          lualine_x = {'location'},
          lualine_y = {},
          lualine_z = {}
        },
        tabline = {},
        winbar = {},
        inactive_winbar = {},
        extensions = {
          'nvim-tree',
          'toggleterm',
          'fugitive',
          'quickfix'
        }
      }
    end,
  },
}

-- „Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ„ÅåÊúâÂäπ„Å™Â†¥Âêà„ÅÆ„ÅøDAP„Éó„É©„Ç∞„Ç§„É≥„ÇíËøΩÂä†
if enable_debug then
  -- nvim-nio (ÂøÖÈ†à‰æùÂ≠òÈñ¢‰øÇ„Å®„Åó„Å¶ÊúÄÂÑ™ÂÖà„Åß„Ç§„É≥„Çπ„Éà„Éº„É´)
  table.insert(plugins, {
    'nvim-neotest/nvim-nio',
    lazy = false,
    priority = 1000,
    config = function()
      -- nvim-nio„ÅåÂà©Áî®ÂèØËÉΩ„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      pcall(require, 'nio')
    end,
  })

  -- DAP - „Éá„Éê„ÉÉ„Ç∞
  table.insert(plugins, {
    'mfussenegger/nvim-dap',
    lazy = false,
    priority = 900,
    dependencies = {
      'nvim-neotest/nvim-nio',
    },
    config = function()
      local dap = require('dap')
      
      -- Project root and launch.json detection utilities
      local function find_project_root()
        local cwd = vim.fn.getcwd()
        local markers = {
          'pubspec.yaml',  -- Flutter/Dart
          'package.json',  -- Node.js
          'Cargo.toml',    -- Rust
          'go.mod',        -- Go
          '.git',          -- Git repository
          '.vscode'        -- VSCode workspace
        }
        
        -- Check current directory first
        for _, marker in ipairs(markers) do
          if vim.fn.filereadable(cwd .. '/' .. marker) == 1 or vim.fn.isdirectory(cwd .. '/' .. marker) == 1 then
            return cwd
          end
        end
        
        -- Walk up the directory tree
        local path = cwd
        while path ~= '/' do
          for _, marker in ipairs(markers) do
            if vim.fn.filereadable(path .. '/' .. marker) == 1 or vim.fn.isdirectory(path .. '/' .. marker) == 1 then
              return path
            end
          end
          path = vim.fn.fnamemodify(path, ':h')
        end
        
        return cwd
      end
      
      local function find_launch_json()
        local project_root = find_project_root()
        local launch_json = project_root .. '/.vscode/launch.json'
        if vim.fn.filereadable(launch_json) == 1 then
          return launch_json
        end
        return nil
      end
      
      -- Enhanced type mapping for launch.json
      local launch_json_type_map = {
        dart = {'dart', 'flutter'},
        flutter = {'dart', 'flutter'},
        node = {'javascript', 'typescript'},
        python = {'python'},
        go = {'go'},
        rust = {'rust'},
        cpp = {'cpp', 'c'},
        java = {'java'}
      }
      
      -- Load launch.json with error handling
      local function load_launch_json(path)
        if path then
          local success, error = pcall(require('dap.ext.vscode').load_launchjs, path, launch_json_type_map)
          if not success then
            vim.notify("Failed to load launch.json: " .. tostring(error), vim.log.levels.ERROR)
            return false
          end
          return true
        end
        return false
      end
      
      -- Initial load of launch.json
      local launch_json_path = find_launch_json()
      load_launch_json(launch_json_path)
      
      -- Flutter debug adapter configuration
      dap.adapters.dart = {
        type = "executable",
        command = (function()
          -- Check mise installation paths
          local function check_mise_dart()
            if vim.fn.executable("mise") == 0 then return nil end
            local dart_path = vim.fn.system("mise which dart 2>/dev/null"):gsub("%s+", "")
            if vim.v.shell_error == 0 and dart_path ~= "" then
              return dart_path
            end
            return nil
          end
          
          -- Check asdf installation paths
          local function check_asdf_dart()
            if vim.fn.executable("asdf") == 0 then return nil end
            local dart_path = vim.fn.system("asdf which dart 2>/dev/null"):gsub("%s+", "")
            if vim.v.shell_error == 0 and dart_path ~= "" then
              return dart_path
            end
            return nil
          end
          
          -- Try mise first, then asdf, then system PATH
          return check_mise_dart() or check_asdf_dart() or vim.fn.exepath("dart") or "dart"
        end)(),
        args = {"debug_adapter"},
        options = {
          detached = false,
        },
      }
      
      -- Flutter debug configuration
      dap.configurations.dart = {
        {
          type = "dart",
          request = "launch",
          name = "Launch Flutter",
          dartSdkPath = function()
            -- Get project-specific Dart SDK path
            local function get_project_dart_sdk()
              local cwd = vim.fn.getcwd()
              
              -- Check project-local mise configuration
              local mise_toml = cwd .. "/.mise.toml"
              if vim.fn.filereadable(mise_toml) == 1 then
                local dart_path = vim.fn.system("cd " .. cwd .. " && mise which dart 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and dart_path ~= "" then
                  return vim.fn.fnamemodify(dart_path, ":h:h")
                end
              end
              
              -- Check project-local asdf configuration
              local tool_versions = cwd .. "/.tool-versions"
              if vim.fn.filereadable(tool_versions) == 1 then
                local dart_path = vim.fn.system("cd " .. cwd .. " && asdf which dart 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and dart_path ~= "" then
                  return vim.fn.fnamemodify(dart_path, ":h:h")
                end
              end
              
              -- Fallback to global mise/asdf, then system PATH
              if vim.fn.executable("mise") == 1 then
                local dart_path = vim.fn.system("mise which dart 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and dart_path ~= "" then
                  return vim.fn.fnamemodify(dart_path, ":h:h")
                end
              end
              
              if vim.fn.executable("asdf") == 1 then
                local dart_path = vim.fn.system("asdf which dart 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and dart_path ~= "" then
                  return vim.fn.fnamemodify(dart_path, ":h:h")
                end
              end
              
              return vim.fn.fnamemodify(vim.fn.exepath("dart"), ":h:h")
            end
            
            return get_project_dart_sdk()
          end,
          flutterSdkPath = function()
            -- Get project-specific Flutter SDK path
            local function get_project_flutter_sdk()
              local cwd = vim.fn.getcwd()
              
              -- Check project-local mise configuration
              local mise_toml = cwd .. "/.mise.toml"
              if vim.fn.filereadable(mise_toml) == 1 then
                local flutter_path = vim.fn.system("cd " .. cwd .. " && mise which flutter 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and flutter_path ~= "" then
                  return vim.fn.fnamemodify(flutter_path, ":h:h")
                end
              end
              
              -- Check project-local asdf configuration
              local tool_versions = cwd .. "/.tool-versions"
              if vim.fn.filereadable(tool_versions) == 1 then
                local flutter_path = vim.fn.system("cd " .. cwd .. " && asdf which flutter 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and flutter_path ~= "" then
                  return vim.fn.fnamemodify(flutter_path, ":h:h")
                end
              end
              
              -- Fallback to global mise/asdf, then system PATH
              if vim.fn.executable("mise") == 1 then
                local flutter_path = vim.fn.system("mise which flutter 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and flutter_path ~= "" then
                  return vim.fn.fnamemodify(flutter_path, ":h:h")
                end
              end
              
              if vim.fn.executable("asdf") == 1 then
                local flutter_path = vim.fn.system("asdf which flutter 2>/dev/null"):gsub("%s+", "")
                if vim.v.shell_error == 0 and flutter_path ~= "" then
                  return vim.fn.fnamemodify(flutter_path, ":h:h")
                end
              end
              
              return vim.fn.fnamemodify(vim.fn.exepath("flutter"), ":h:h")
            end
            
            return get_project_flutter_sdk()
          end,
          program = "${workspaceFolder}/lib/main.dart",
          cwd = "${workspaceFolder}",
        },
        {
          type = "dart",
          request = "launch",
          name = "Launch Dart",
          program = "${file}",
          cwd = "${workspaceFolder}",
        },
      }
      
      -- „Éá„Éê„ÉÉ„Ç∞„Ç≠„Éº„Éû„ÉÉ„ÉóÔºà„Éñ„É≠„Ç∞Ë®ò‰∫ãÊ∫ñÊã†Ôºâ
      vim.keymap.set('n', '<F5>', dap.continue, { desc = "Debug: Start/Continue" })
      vim.keymap.set('n', '<F1>', dap.step_into, { desc = "Debug: Step Into" })
      vim.keymap.set('n', '<F2>', dap.step_over, { desc = "Debug: Step Over" })
      vim.keymap.set('n', '<F3>', dap.step_out, { desc = "Debug: Step Out" })
      vim.keymap.set('n', '<Leader>b', dap.toggle_breakpoint, { desc = "Debug: Toggle Breakpoint" })
      
      -- ËøΩÂä†„ÅÆ„Éá„Éê„ÉÉ„Ç∞„Ç≠„Éº„Éû„ÉÉ„Éó
      vim.keymap.set('n', '<F10>', dap.step_over, { desc = "Debug: Step Over (Alt)" })
      vim.keymap.set('n', '<F11>', dap.step_into, { desc = "Debug: Step Into (Alt)" })
      vim.keymap.set('n', '<F12>', dap.step_out, { desc = "Debug: Step Out (Alt)" })
      vim.keymap.set('n', '<Leader>B', function()
        dap.set_breakpoint(vim.fn.input('Breakpoint condition: '))
      end, { desc = "Debug: Conditional Breakpoint" })
      vim.keymap.set('n', '<Leader>dr', dap.repl.open, { desc = "Debug: Open REPL" })
      
      -- VSCode style debug keymaps
      vim.keymap.set('n', '<Leader>dl', function()
        local launch_json_path = find_launch_json()
        if launch_json_path then
          if load_launch_json(launch_json_path) then
            vim.notify("VSCode launch.json reloaded: " .. vim.fn.fnamemodify(launch_json_path, ':t'), vim.log.levels.INFO)
          end
        else
          vim.notify("No launch.json found in project", vim.log.levels.WARN)
        end
      end, { desc = "Reload VSCode launch.json" })
      
      -- Auto-reload launch.json when it changes
      local function setup_launch_json_watcher()
        local launch_json_path = find_launch_json()
        if launch_json_path then
          -- Set up file watcher for launch.json changes
          vim.api.nvim_create_autocmd({"BufWritePost"}, {
            pattern = "launch.json",
            callback = function()
              vim.defer_fn(function()
                local current_launch_json = find_launch_json()
                if current_launch_json and load_launch_json(current_launch_json) then
                  vim.notify("Auto-reloaded launch.json configurations", vim.log.levels.INFO)
                end
              end, 500)  -- Small delay to ensure file is written
            end,
            desc = "Auto-reload VSCode launch.json on save"
          })
        end
      end
      
      -- Set up the watcher
      setup_launch_json_watcher()
    end,
  })

  -- DAP UI - „Éá„Éê„ÉÉ„Ç∞Áî®UI
  table.insert(plugins, {
    'rcarriga/nvim-dap-ui',
    lazy = false,
    priority = 800,
    dependencies = {
      'mfussenegger/nvim-dap',
      'nvim-neotest/nvim-nio',
    },
    config = function()
      local nio_ok = pcall(require, 'nio')
      if not nio_ok then
        vim.notify("nvim-nio is not available. DAP UI may not work properly.", vim.log.levels.WARN)
        return
      end
      
      local dap = require('dap')
      local dapui = require('dapui')
      
      dapui.setup()
      
      -- DAP UIËá™ÂãïÈñãÈñâ
      dap.listeners.after.event_initialized["dapui_config"] = function()
        dapui.open()
      end
      dap.listeners.before.event_terminated["dapui_config"] = function()
        dapui.close()
      end
      dap.listeners.before.event_exited["dapui_config"] = function()
        dapui.close()
      end
      
      vim.keymap.set('n', '<Leader>du', dapui.toggle, { desc = "Debug: Toggle UI" })
    end,
  })

  -- DAP Virtual Text - „Éá„Éê„ÉÉ„Ç∞ÊôÇ„ÅÆÂ§âÊï∞Ë°®Á§∫
  table.insert(plugins, {
    'theHamsta/nvim-dap-virtual-text',
    dependencies = {
      'mfussenegger/nvim-dap',
    },
    config = function()
      require('nvim-dap-virtual-text').setup()
    end,
  })
end

-- lazy.nvim„Åß„Éó„É©„Ç∞„Ç§„É≥„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
local setup_ok, setup_error = pcall(function()
  require("lazy").setup(plugins, {
    ui = {
      border = "rounded",
    },
  })
end)

if not setup_ok then
  vim.notify("Plugin setup failed: " .. tostring(setup_error), vim.log.levels.ERROR)
  print("Plugin setup failed: " .. tostring(setup_error))
end

-- ===============================================
-- „Éï„Ç°„Ç§„É´„Çø„Ç§„ÉóÊ§úÂá∫„ÅÆËøΩÂä†
-- ===============================================

-- FlutterÂõΩÈöõÂåñ„Éï„Ç°„Ç§„É´(.arb)„ÇíJSONÂΩ¢Âºè„Å®„Åó„Å¶Ë™çË≠ò
vim.filetype.add {
  extension = {
    arb = 'json',
  },
}

-- ===============================================
-- FlutterÈñãÁô∫Áî®Ëá™Âãï„Ç≥„Éû„É≥„Éâ
-- ===============================================

local flutter_group = vim.api.nvim_create_augroup("FlutterDev", { clear = true })

-- Dart„Éï„Ç°„Ç§„É´Â∞ÇÁî®Ë®≠ÂÆö
vim.api.nvim_create_autocmd("FileType", {
  group = flutter_group,
  pattern = "dart",
  callback = function()
    vim.opt_local.shiftwidth = 2
    vim.opt_local.tabstop = 2
    vim.opt_local.expandtab = true
    vim.opt_local.colorcolumn = "120"
    
    -- DartÁâπÊúâ„ÅÆ„Ç≠„Éº„Éû„ÉÉ„Éó
    vim.keymap.set('n', '<Leader>di', ':FlutterRun --verbose<CR>', { buffer = true })
    vim.keymap.set('n', '<Leader>dh', ':FlutterReload<CR>', { buffer = true })
    vim.keymap.set('n', '<Leader>dR', ':FlutterRestart<CR>', { buffer = true })
  end,
})

-- pubspec.yamlÁî®Ë®≠ÂÆö
vim.api.nvim_create_autocmd("BufRead", {
  group = flutter_group,
  pattern = "pubspec.yaml",
  callback = function()
    vim.opt_local.shiftwidth = 2
    vim.opt_local.tabstop = 2
    vim.opt_local.expandtab = true
  end,
})

-- FlutterÂ∞ÇÁî®‰øùÂ≠òÊôÇÂá¶ÁêÜ
vim.api.nvim_create_autocmd("BufWritePre", {
  group = flutter_group,
  pattern = "*.dart",
  callback = function()
    -- ‰øùÂ≠òÊôÇ„Å´Ëá™Âãï„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÔºàconform.nvim„Åæ„Åü„ÅØLSP„Çí‰ΩøÁî®Ôºâ
    local conform_ok, conform = pcall(require, 'conform')
    if conform_ok then
      conform.format({ bufnr = 0, timeout_ms = 1000 })
    else
      -- „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: LSP„Éï„Ç©„Éº„Éû„ÉÉ„Éà
      local clients = vim.lsp.get_clients({ bufnr = 0 })
      if #clients > 0 then
        vim.lsp.buf.format({ 
          timeout_ms = 3000,
          filter = function(client)
            return client.name == "dartls"
          end 
        })
      end
    end
  end,
})

-- ‰øùÂ≠òÂæå„Å´lintÂÆüË°å
vim.api.nvim_create_autocmd("BufWritePost", {
  group = flutter_group,
  pattern = "*.dart",
  callback = function()
    -- nvim-lint„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„Å´lintÂÆüË°å
    local lint_ok, lint = pcall(require, 'lint')
    if lint_ok then
      lint.try_lint()
    end
    
    -- Ë®∫Êñ≠„ÅÆÂÜçË°®Á§∫
    vim.defer_fn(function()
      vim.diagnostic.show()
    end, 100)
  end,
})

-- ===============================================
-- FlutterÈñãÁô∫Áî®„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
-- ===============================================

-- Flutter„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ§úÂá∫
function _G.is_flutter_project()
  return vim.fn.filereadable(vim.fn.getcwd() .. '/pubspec.yaml') == 1
end

-- FlutterÈñãÁô∫„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà
function _G.toggle_flutter_mode()
  if _G.is_flutter_project() then
    print("Flutter development mode enabled")
    vim.cmd('FlutterRun')
  else
    print("Not a Flutter project")
  end
end

-- „ÇØ„Ç§„ÉÉ„ÇØFlutterÊñ∞Ë¶è„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê
function _G.create_flutter_project()
  local project_name = vim.fn.input("Project name: ")
  if project_name ~= "" then
    vim.fn.system("flutter create " .. project_name)
    vim.cmd("cd " .. project_name)
    print("Flutter project '" .. project_name .. "' created")
  end
end

-- FlutterÈñãÁô∫Áî®„Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥Êõ¥Êñ∞
function _G.flutter_statusline()
  local status = ""
  if _G.is_flutter_project() then
    status = status .. "üì± Flutter"
    
    -- Flutter„Éá„Éê„Ç§„ÇπÊÉÖÂ†±ÂèñÂæó
    local device_info = vim.fn.system("flutter devices --machine 2>/dev/null")
    if vim.v.shell_error == 0 and device_info ~= "" then
      status = status .. " | üì≤"
    end
  end
  return status
end

-- ===============================================
-- FlutterÈñãÁô∫Áî®„Ç≠„Éº„Éû„ÉÉ„Éó
-- ===============================================

-- „Ç∞„É≠„Éº„Éê„É´Flutter„Ç≠„Éº„Éû„ÉÉ„Éó
vim.keymap.set('n', '<Leader>Fn', ':lua _G.create_flutter_project()<CR>', { desc = 'New Flutter project' })
vim.keymap.set('n', '<Leader>Ft', ':lua _G.toggle_flutter_mode()<CR>', { desc = 'Toggle Flutter mode' })
vim.keymap.set('n', '<Leader>Fl', ':FlutterLogToggle<CR>', { desc = 'Toggle Flutter logs' })
vim.keymap.set('n', '<Leader>Fs', ':FlutterSuper<CR>', { desc = 'Flutter super class' })
vim.keymap.set('n', '<Leader>Fw', ':FlutterWrap<CR>', { desc = 'Flutter wrap widget' })

-- VSCodeÁµ±Âêà„Ç≠„Éº„Éû„ÉÉ„Éó
vim.keymap.set('n', '<Leader>vs', function()
  -- Show available VSCode configurations
  local telescope_ok, telescope = pcall(require, 'telescope.builtin')
  if telescope_ok then
    telescope.commands()
  else
    vim.cmd('OverseerRun')
  end
end, { desc = 'Show VSCode configurations' })

-- VSCode TasksÁµ±Âêà„Ç≠„Éº„Éû„ÉÉ„Éó
vim.keymap.set('n', '<Leader>vt', ':VstaskInfo<CR>', { desc = 'VSCode Tasks Info' })
vim.keymap.set('n', '<Leader>vr', ':VstaskRun<CR>', { desc = 'Run VSCode Task' })

-- Project root detection function is defined in the DAP configuration above

vim.keymap.set('n', '<Leader>vl', function()
  -- Enhanced configuration selector with better error handling
  local function get_project_root()
    local cwd = vim.fn.getcwd()
    local markers = {
      'pubspec.yaml',  -- Flutter/Dart
      'package.json',  -- Node.js
      'Cargo.toml',    -- Rust
      'go.mod',        -- Go
      '.git',          -- Git repository
      '.vscode'        -- VSCode workspace
    }
    
    -- Check current directory first
    for _, marker in ipairs(markers) do
      if vim.fn.filereadable(cwd .. '/' .. marker) == 1 or vim.fn.isdirectory(cwd .. '/' .. marker) == 1 then
        return cwd
      end
    end
    
    -- Walk up the directory tree
    local path = cwd
    while path ~= '/' do
      for _, marker in ipairs(markers) do
        if vim.fn.filereadable(path .. '/' .. marker) == 1 or vim.fn.isdirectory(path .. '/' .. marker) == 1 then
          return path
        end
      end
      path = vim.fn.fnamemodify(path, ':h')
    end
    
    return cwd
  end
  
  local function load_launch_json_with_type_map(path)
    local type_map = {
      dart = {'dart', 'flutter'},
      flutter = {'dart', 'flutter'},
      node = {'javascript', 'typescript'},
      python = {'python'},
      go = {'go'},
      rust = {'rust'},
      cpp = {'cpp', 'c'},
      java = {'java'}
    }
    
    if path then
      local success, error = pcall(require('dap.ext.vscode').load_launchjs, path, type_map)
      if not success then
        vim.notify("Failed to load launch.json: " .. tostring(error), vim.log.levels.ERROR)
        return false
      end
      return true
    end
    return false
  end
  
  local project_root = get_project_root()
  local launch_json_path = project_root .. '/.vscode/launch.json'
  
  if vim.fn.filereadable(launch_json_path) == 0 then
    vim.notify("No .vscode/launch.json found in project: " .. project_root, vim.log.levels.WARN)
    -- Offer to create a basic launch.json
    vim.ui.input({ prompt = "Create basic launch.json? (y/n): " }, function(input)
      if input and input:lower() == 'y' then
        vim.cmd('edit ' .. launch_json_path)
      end
    end)
    return
  end
  
  -- Reload configurations
  local dap = require('dap')
  load_launch_json_with_type_map(launch_json_path)
  
  -- Get all available configurations with better sorting
  local current_ft = vim.bo.filetype
  local all_configs = {}
  
  -- Collect configurations from multiple file types, prioritizing current filetype
  local filetypes_to_check = {current_ft, 'dart', 'flutter'}
  
  for _, ft in ipairs(filetypes_to_check) do
    if dap.configurations[ft] then
      for _, config in ipairs(dap.configurations[ft]) do
        table.insert(all_configs, {
          config = config,
          filetype = ft,
          is_current_ft = ft == current_ft
        })
      end
    end
  end
  
  if #all_configs > 0 then
    -- Sort configurations: current filetype first, then by name
    table.sort(all_configs, function(a, b)
      if a.is_current_ft ~= b.is_current_ft then
        return a.is_current_ft
      end
      return (a.config.name or '') < (b.config.name or '')
    end)
    
    vim.ui.select(all_configs, {
      prompt = 'Select debug configuration (' .. vim.fn.fnamemodify(project_root, ':t') .. '):',
      format_item = function(item)
        local prefix = item.is_current_ft and '‚óè ' or '  '
        local name = item.config.name or 'Unnamed'
        local type_info = '[' .. (item.config.type or 'unknown') .. ']'
        local args_info = ''
        
        if item.config.args and #item.config.args > 0 then
          args_info = ' (args: ' .. table.concat(item.config.args, ' ') .. ')'
        end
        
        return prefix .. name .. ' ' .. type_info .. args_info
      end,
    }, function(choice)
      if choice then
        local old_cwd = vim.fn.getcwd()
        vim.cmd('cd ' .. project_root)
        
        vim.notify("Starting debug session: " .. (choice.config.name or 'Unnamed'), vim.log.levels.INFO)
        dap.run(choice.config)
        
        vim.cmd('cd ' .. old_cwd)
      end
    end)
  else
    vim.notify("No launch configurations found. Check " .. launch_json_path, vim.log.levels.WARN)
    vim.ui.input({ prompt = "Open launch.json for editing? (y/n): " }, function(input)
      if input and input:lower() == 'y' then
        vim.cmd('edit ' .. launch_json_path)
      end
    end)
  end
end, { desc = 'Select and run VSCode launch configuration' })

print("Flutter development environment loaded! üéØ")